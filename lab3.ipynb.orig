{
 "cells": [
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Лаба 3\n",
    "\n",
    "#### задачи траекторного управления"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Given"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "import sympy as sm\n",
    "import numpy as np\n",
    "import scipy as sp\n",
    "import matplotlib.pyplot as plt\n",
    "from IPython.display import display, Math\n",
    "import inspect\n",
    "import bisect"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# robot model parameters\n",
    "m = 2.8 # in kg\n",
    "J = 3 # in kg*m"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "x, y, omega, alpha, alpha_asterisk, vx, vy, Fx, Fy, M  = sm.symbols(\"x y omega alpha alpha_asterisk vx vy Fx Fy M\")\n",
    "A = sm.Matrix( [[1/m,0,0],[0,1/m,0],[0,0,1/J]] )\n",
    "z = sm.Matrix( [[vx],[vy],[omega]] ) # in m frame\n",
    "u = sm.Matrix( [[Fx],[Fy],[M]] )\n",
    "R = sm.Matrix( [[sm.cos(alpha),sm.sin(alpha)],[-sm.sin(alpha),sm.cos(alpha)]] ) # from mobile to base"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "def display_expr(expr):\n",
    "    frame = inspect.currentframe()\n",
    "    frame = inspect.getouterframes(frame)[1]\n",
    "    string = inspect.getframeinfo(frame[0]).code_context[0].strip()\n",
    "    args = string[string.find('(') + 1:-1].split(',')\n",
    "    \n",
    "    names = []\n",
    "    for i in args:\n",
    "        if i.find('=') != -1:\n",
    "            names.append(i.split('=')[1].strip())\n",
    "        else:\n",
    "            names.append(i)\n",
    "    if names[0]=='phi_1':\n",
    "        names[0] = '\\\\varphi_1'\n",
    "    if names[0]=='phi_2':\n",
    "        names[0] = '\\\\varphi_2'\n",
    "    if names[0]=='phi_3':\n",
    "        names[0] = '\\\\varphi_3'\n",
    "    if names[0]=='vm':\n",
    "        names[0] = 'v_m'\n",
    "    if names[0]=='vb':\n",
    "        names[0] = 'v_b'\n",
    "    if names[0]=='dots':\n",
    "        names[0] = '\\\\dot s'\n",
    "    if names[0]=='dote':\n",
    "        names[0] = '\\\\dot e'\n",
    "    if names[0]=='xi':\n",
    "        names[0] = '\\\\xi'\n",
    "\n",
    "    expr = expr.xreplace({n : round(n, 3) for n in expr.atoms(sm.Number)})\n",
    "    str = sm.latex(expr)\n",
    "    # str = str.replace('\\\\theta','\\\\vartheta')\n",
    "    str = str.replace('vx','v_x')\n",
    "    str = str.replace('vy','v_y')\n",
    "    str = str.replace('Fx','F_x')\n",
    "    str = str.replace('Fy','F_y') \n",
    "    str = str.replace('\\\\alpha_{asterisk}','\\\\alpha^{*}') \n",
    "    str = str.replace('dotxi','\\\\dot \\\\xi')\n",
    "    str = str.replace('\\\\xi_{dxds}','\\\\frac{\\partial x_{\\\\xi}(s)}{\\partial s}') \n",
    "\n",
    "    display(Math(names[0] + '=' + str))    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/latex": [
       "$\\displaystyle Au=\\left[\\begin{matrix}0.357 F_x\\\\0.357 F_y\\\\0.333 M\\end{matrix}\\right]$"
      ],
      "text/plain": [
       "<IPython.core.display.Math object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "Au = A*u\n",
    "display_expr(Au)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/latex": [
       "$\\displaystyle v_m=\\left[\\begin{matrix}v_x\\\\v_y\\end{matrix}\\right]$"
      ],
      "text/plain": [
       "<IPython.core.display.Math object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/latex": [
       "$\\displaystyle v_b=\\left[\\begin{matrix}v_x \\cos{\\left(\\alpha \\right)} + v_y \\sin{\\left(\\alpha \\right)}\\\\- v_x \\sin{\\left(\\alpha \\right)} + v_y \\cos{\\left(\\alpha \\right)}\\end{matrix}\\right]$"
      ],
      "text/plain": [
       "<IPython.core.display.Math object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/latex": [
       "$\\displaystyle \\dot s=- \\left(- v_x \\sin{\\left(\\alpha \\right)} + v_y \\cos{\\left(\\alpha \\right)}\\right) \\sin{\\left(\\alpha^{*} \\right)} + \\left(v_x \\cos{\\left(\\alpha \\right)} + v_y \\sin{\\left(\\alpha \\right)}\\right) \\cos{\\left(\\alpha^{*} \\right)}$"
      ],
      "text/plain": [
       "<IPython.core.display.Math object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/latex": [
       "$\\displaystyle \\dot e=\\left(- v_x \\sin{\\left(\\alpha \\right)} + v_y \\cos{\\left(\\alpha \\right)}\\right) \\cos{\\left(\\alpha^{*} \\right)} + \\left(v_x \\cos{\\left(\\alpha \\right)} + v_y \\sin{\\left(\\alpha \\right)}\\right) \\sin{\\left(\\alpha^{*} \\right)}$"
      ],
      "text/plain": [
       "<IPython.core.display.Math object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "vm = sm.Matrix([[vx],[vy]])\n",
    "display_expr(vm)\n",
    "vb = R*vm\n",
    "display_expr(vb)\n",
    "dots = (sm.transpose(R.subs(alpha,alpha_asterisk))*vb)[0]\n",
    "display_expr(dots)\n",
    "dote = (sm.transpose(R.subs(alpha,alpha_asterisk))*vb)[1]\n",
    "display_expr(dote)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/latex": [
       "$\\displaystyle a=\\left[\\begin{matrix}0.357 F_x \\cos{\\left(\\alpha \\right)} - 0.357 F_y \\sin{\\left(\\alpha \\right)}\\\\0.357 F_x \\sin{\\left(\\alpha \\right)} + 0.357 F_y \\cos{\\left(\\alpha \\right)}\\end{matrix}\\right]$"
      ],
      "text/plain": [
       "<IPython.core.display.Math object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "a = (1/m)*sm.transpose(R)*sm.Matrix([[Fx],[Fy]])\n",
    "display_expr(a)"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Traj phi"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/latex": [
       "$\\displaystyle \\varphi_1=\\left(x + 3\\right)^{2} + \\left(y - 2\\right)^{2} - 9$"
      ],
      "text/plain": [
       "<IPython.core.display.Math object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/latex": [
       "$\\displaystyle \\varphi_2=y - 2 \\cos{\\left(0.5 x + 0.3 \\right)} - 2$"
      ],
      "text/plain": [
       "<IPython.core.display.Math object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/latex": [
       "$\\displaystyle \\varphi_3=\\left(x - 12\\right)^{2} + \\left(y - 2\\right)^{2} - 25$"
      ],
      "text/plain": [
       "<IPython.core.display.Math object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#trajectory\n",
    "x0 = -7\n",
    "y0 = 4\n",
    "alpha0 = 3*np.pi/4\n",
    "vs_des1 = 1 \n",
    "vs_des2 = 3\n",
    "vs_des3 = 5\n",
    "\n",
    "R1 = 3\n",
    "xc1 = -3\n",
    "yc1 = 2\n",
    "R3 = 5\n",
    "xc3 = 12\n",
    "yc3 = 2\n",
    "phi_1 = (x-xc1)**2+(y-yc1)**2-R1**2\n",
    "phi_2 = -2*sm.cos(0.5*x+0.3)+y-2\n",
    "phi_3 = (x-xc3)**2 + (y-yc3)**2 - R3**2\n",
    "display_expr(phi_1)\n",
    "display_expr(phi_2)\n",
    "display_expr(phi_3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/latex": [
       "$\\displaystyle \\left[ 2 - \\sqrt{- x \\left(x + 6\\right)}, \\  \\sqrt{- x \\left(x + 6\\right)} + 2\\right]$"
      ],
      "text/plain": [
       "<IPython.core.display.Math object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "calc_phi_1_y = sm.solve(phi_1, y)\n",
    "display(Math(sm.latex(calc_phi_1_y)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/latex": [
       "$\\displaystyle \\left[ 2.0 \\cos{\\left(0.5 x + 0.3 \\right)} + 2.0\\right]$"
      ],
      "text/plain": [
       "<IPython.core.display.Math object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "calc_phi_2_y = sm.solve(phi_2, y)\n",
    "display(Math(sm.latex(calc_phi_2_y)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/latex": [
       "$\\displaystyle \\left[ 2 - \\sqrt{- \\left(x - 17\\right) \\left(x - 7\\right)}, \\  \\sqrt{- \\left(x - 17\\right) \\left(x - 7\\right)} + 2\\right]$"
      ],
      "text/plain": [
       "<IPython.core.display.Math object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "calc_phi_3_y = sm.solve(phi_3, y)\n",
    "display(Math(sm.latex(calc_phi_3_y)))"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Traj calc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(x,)\n",
      "(x,)\n",
      "(x,)\n",
      "(x,)\n",
      "(x,)\n"
     ]
    }
   ],
   "source": [
    "params = tuple(calc_phi_1_y[0].free_symbols)\n",
    "print(params)\n",
    "fun_calc_phi_11_y = sm.lambdify(params, calc_phi_1_y[0], modules='numpy')\n",
    "params = tuple(calc_phi_1_y[1].free_symbols)\n",
    "print(params)\n",
    "fun_calc_phi_12_y = sm.lambdify(params, calc_phi_1_y[1], modules='numpy')\n",
    "\n",
    "params = tuple(calc_phi_2_y[0].free_symbols)\n",
    "print(params)\n",
    "fun_calc_phi_2_y = sm.lambdify(params, calc_phi_2_y[0], modules='numpy')\n",
    "\n",
    "params = tuple(calc_phi_3_y[0].free_symbols)\n",
    "print(params)\n",
    "fun_calc_phi_31_y = sm.lambdify(params, calc_phi_3_y[0], modules='numpy')\n",
    "params = tuple(calc_phi_3_y[1].free_symbols)\n",
    "print(params)\n",
    "fun_calc_phi_32_y = sm.lambdify(params, calc_phi_3_y[1], modules='numpy')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x1ff3fc8ea90>]"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "x1 = np.arange(xc1-R1,xc1+R1,1e-3)\n",
    "x2 = np.arange(-6,17,1e-2)\n",
    "x3 = np.arange(xc3-R3,xc3+R3,1e-3)\n",
    "plt.plot(x1,fun_calc_phi_11_y(x1))\n",
    "plt.plot(x1,fun_calc_phi_12_y(x1))\n",
    "plt.plot(x2,fun_calc_phi_2_y(x2))\n",
    "plt.plot(x3,fun_calc_phi_31_y(x3))\n",
    "plt.plot(x3,fun_calc_phi_32_y(x3))\n",
    "plt.plot(x0,y0,\"or\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-0.7583442022818133\n"
     ]
    }
   ],
   "source": [
    "#поиск точек переключений\n",
    "def calc_fun_optim_finding_x(x):\n",
    "    return (fun_calc_phi_12_y(x)-fun_calc_phi_2_y(x))**2\n",
    "xsw1 = sp.optimize.minimize_scalar(calc_fun_optim_finding_x,bounds=(xc1-R1,xc1+R1),method='bounded').x\n",
    "print(xsw1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "16.775623130982034\n"
     ]
    }
   ],
   "source": [
    "def calc_fun_optim_finding_x(x):\n",
    "    return (fun_calc_phi_2_y(x)-fun_calc_phi_31_y(x))**2\n",
    "xsw2 = sp.optimize.minimize_scalar(calc_fun_optim_finding_x,bounds=(xc3,xc3+R3),method='bounded').x\n",
    "print(xsw2)\n",
    "xsw3 = xc3-R3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# desired traj\n",
    "x1 = np.arange(xc1-R1,xsw1,1e-3)\n",
    "x2 = np.arange(xsw1,xsw2,1e-2)\n",
    "x3 = np.arange(xsw3,xsw2,1e-3)\n",
    "x4 = np.arange(xsw3,xc3+R3,1e-3)\n",
    "plt.plot(x1,fun_calc_phi_12_y(x1))\n",
    "plt.plot(x2,fun_calc_phi_2_y(x2))\n",
    "plt.plot(x3,fun_calc_phi_31_y(x3))\n",
    "plt.plot(x4,fun_calc_phi_32_y(x4))\n",
    "plt.plot(x0,y0,\"or\")\n",
    "plt.grid(True)\n",
    "ax = plt.gca()\n",
    "ax.set_aspect('equal', adjustable='box')"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### S calc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "def s_1(x):\n",
    "    return (np.pi - np.arccos((x-xc1)/R1) )*R1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/latex": [
       "$\\displaystyle L_2=\\left(1.0 \\sin^{2}{\\left(0.5 x + 0.3 \\right)} + 1\\right)^{0.5}$"
      ],
      "text/plain": [
       "<IPython.core.display.Math object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# compute s paths\n",
    "L_2 = sm.sqrt( 1 + ( sm.diff(calc_phi_2_y[0],x) )**2 )\n",
    "display_expr(L_2)\n",
    "\n",
    "params = tuple(L_2.free_symbols)\n",
    "calc_s_2_int = sm.lambdify(params, L_2, modules='numpy')\n",
    "\n",
    "def s_2(x):\n",
    "    return sp.integrate.quad(calc_s_2_int,xsw1,x)[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "def s_3(x):\n",
    "    return np.arccos((x-xc3)/R3)*R3 - np.arccos((xsw2-xc3)/R3)*R3\n",
    "def s_4(x):\n",
    "    return (np.pi - np.arccos((x-xc3)/R3) )*R3"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### finding $s_0$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "t_data = np.arange(xc1-R1,xc1,1e-2)\n",
    "plt.plot(t_data,(t_data-(xc1-R1))*np.tan(alpha0 - np.pi) + y0)\n",
    "plt.plot(t_data,fun_calc_phi_12_y(t_data))\n",
    "plt.grid(True)\n",
    "ax = plt.gca()\n",
    "ax.set_aspect('equal', adjustable='box')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-5.561554301636298\n",
      "1.6423682554168422\n"
     ]
    }
   ],
   "source": [
    "# finding s0\n",
    "def fun_optim_s0(x):\n",
    "    return ( (x-(xc1-R1))*np.tan(alpha0 - np.pi) + y0 - fun_calc_phi_12_y(x) )**2\n",
    "\n",
    "x0_4s0 = sp.optimize.minimize_scalar(fun_optim_s0,bounds=(xc1-R1,xc1),method='bounded').x\n",
    "s0 = s_1(x0_4s0)\n",
    "print(x0_4s0)\n",
    "print(s0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "58.64969623920736\n",
      "[0, 7.243989865398947, 28.737350135440845, 42.94173297125839, 58.64969623920736]\n",
      "21.493360270041897\n",
      "14.204382835817544\n",
      "15.70796326794897\n"
     ]
    }
   ],
   "source": [
    "s_len = s_1(xsw1) + s_2(xsw2) + s_3(xc3-R3) + s_4(xc3+R3)\n",
    "print(s_len)\n",
    "s_all = [0,s_1(xsw1),s_1(xsw1) + s_2(xsw2),s_1(xsw1) + s_2(xsw2) + s_3(xc3-R3),s_1(xsw1) + s_2(xsw2) + s_3(xc3-R3) + s_4(xc3+R3)]\n",
    "print(s_all)\n",
    "print(s_all[2]-s_all[1])\n",
    "print(s_all[3]-s_all[2])\n",
    "print(s_all[4]-s_all[3])"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### control preaparing"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$\\Upsilon(x,y)$ = $\\begin{bmatrix} \\frac{\\partial \\psi(x,y)}{\\partial x} & \\frac{\\partial \\psi(x,y)}{\\partial y} \\\\ & \\\\\\frac{\\partial \\varphi(x,y)}{\\partial x} & \\frac{\\partial \\varphi(x,y)}{\\partial y} \\end{bmatrix}$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "# calc alpha_asterisk\n",
    "s = sm.symbols(\"s\")\n",
    "phi_12_x = sm.solve( ( sm.pi - sm.acos((x-xc1)/R1) )*R1 - s , x)[0] \n",
    "params = tuple(phi_12_x.free_symbols)\n",
    "calc_phi_1_x = sm.lambdify(params, phi_12_x, modules='numpy')\n",
    "\n",
    "dotphi_1 = sm.diff(calc_phi_1_y[1],x)\n",
    "params = tuple(dotphi_1.free_symbols)\n",
    "calc_dotphi_1 = sm.lambdify(params, dotphi_1, modules='numpy')\n",
    "\n",
    "def fun_optim_s2_x(x,s):\n",
    "    return (s_2(x)-s)**2\n",
    "def calc_phi_2_x(s):\n",
    "    return sp.optimize.minimize(fun_optim_s2_x,(xsw1+xsw2)/2,args=s).x[0]\n",
    "dotphi_2 = sm.diff(calc_phi_2_y[0],x)\n",
    "params = tuple(dotphi_2.free_symbols)\n",
    "calc_dotphi_2 = sm.lambdify(params, dotphi_2, modules='numpy')\n",
    "\n",
    "phi_3_x = sm.solve( (sm.acos((x-xc3)/R3))*R3 - (sm.acos((xsw2-xc3)/R3))*R3 - s , x )[0] \n",
    "params = tuple(phi_3_x.free_symbols)\n",
    "calc_phi_3_x = sm.lambdify(params, phi_3_x, modules='numpy')\n",
    "\n",
    "dotphi_3 = sm.diff(calc_phi_3_y[0],x)\n",
    "params = tuple(dotphi_3.free_symbols)\n",
    "calc_dotphi_3 = sm.lambdify(params, dotphi_3, modules='numpy')\n",
    "\n",
    "phi_4_x = sm.solve( (sm.pi - sm.acos((x-xc3)/R3) )*R3 - s , x )[0] \n",
    "params = tuple(phi_4_x.free_symbols)\n",
    "calc_phi_4_x = sm.lambdify(params, phi_4_x, modules='numpy')\n",
    "\n",
    "dotphi_4 = sm.diff(calc_phi_3_y[1],x)\n",
    "params = tuple(dotphi_4.free_symbols)\n",
    "calc_dotphi_4 = sm.lambdify(params, dotphi_4, modules='numpy')\n",
    "\n",
    "def calc_alpha_asterisk(s):\n",
    "    if s<=0:\n",
    "        val_asterisk = 1e6\n",
    "    elif s>=s_all[4]:\n",
    "        val_asterisk = -1e6\n",
    "    elif s==s_all[3]:\n",
    "        val_asterisk = 1e6\n",
    "    elif s==s_all[2]:\n",
    "        val_asterisk = 1.7523330864423152\n",
    "    elif s==s_all[1]: \n",
    "        val_asterisk = -0.5226298800644945\n",
    "    else:\n",
    "        i = search_index(s)\n",
    "        if i==len(s_all)-1:\n",
    "            i-=1\n",
    "        if i==0:\n",
    "            x = calc_phi_1_x(s)\n",
    "            val_asterisk = calc_dotphi_1(x)\n",
    "        elif i==1:\n",
    "            x = calc_phi_2_x(s-s_all[1])\n",
    "            val_asterisk = calc_dotphi_2(x)\n",
    "        elif i==2:\n",
    "            x = calc_phi_3_x(s-s_all[2])\n",
    "            val_asterisk = calc_dotphi_3(x)\n",
    "        elif i==3:\n",
    "            x = calc_phi_4_x(s-s_all[3])\n",
    "            val_asterisk = calc_dotphi_4(x)\n",
    "        \n",
    "        # print(i)\n",
    "        # print(x)\n",
    "    return val_asterisk\n",
    "\n",
    "def search_index(x):\n",
    "    return bisect.bisect(s_all,x) - 1\n",
    "\n",
    "# calc_alpha_asterisk((s_all[4]-s_all[3])/2+s_all[3])\n",
    "# calc_alpha_asterisk(58)\n",
    "# (calc_dotphi_3(calc_phi_3_x(s_all[2])) + calc_dotphi_2(calc_phi_2_x(s_all[2]-s_all[1])) ) /2\n",
    "# (calc_alpha_asterisk(s_all[1]-1e-6) + calc_alpha_asterisk(s_all[1]))/2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "s_vals = np.arange(0,s_all[2]-s_all[1]-1e-3,1e-1)\n",
    "x_vals = []\n",
    "for i in range(len(s_vals)):\n",
    "    x_vals.append(calc_phi_2_x(s_vals[i]))\n",
    "plt.plot(s_vals,x_vals)\n",
    "plt.show()\n",
    "\n",
    "x_vals = np.arange(xsw1,xsw2,1e-2)\n",
    "s2_vals = []\n",
    "for i in range(len(x_vals)):\n",
    "    s2_vals.append(s_2(x_vals[i]))\n",
    "plt.plot(x_vals,s2_vals)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/latex": [
       "$\\displaystyle y - 2 \\cos{\\left(0.5 x + 0.3 \\right)} - 2$"
      ],
      "text/plain": [
       "<IPython.core.display.Math object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/latex": [
       "$\\displaystyle 1$"
      ],
      "text/plain": [
       "<IPython.core.display.Math object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/latex": [
       "$\\displaystyle 0$"
      ],
      "text/plain": [
       "<IPython.core.display.Math object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/latex": [
       "$\\displaystyle 1.0 \\sin{\\left(0.5 x + 0.3 \\right)}$"
      ],
      "text/plain": [
       "<IPython.core.display.Math object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/latex": [
       "$\\displaystyle 0.5 \\cos{\\left(0.5 x + 0.3 \\right)}$"
      ],
      "text/plain": [
       "<IPython.core.display.Math object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/latex": [
       "$\\displaystyle 0$"
      ],
      "text/plain": [
       "<IPython.core.display.Math object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/latex": [
       "$\\displaystyle \\xi=\\frac{0.5 \\left|{\\cos{\\left(0.5 x + 0.3 \\right)}}\\right|}{\\left(1.0 \\sin^{2}{\\left(0.5 x + 0.3 \\right)} + 1\\right)^{1.5}}$"
      ],
      "text/plain": [
       "<IPython.core.display.Math object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/latex": [
       "$\\displaystyle dotxi=- \\frac{0.75 \\sin{\\left(0.5 x + 0.3 \\right)} \\cos^{2}{\\left(0.5 x + 0.3 \\right)}}{\\left(1.0 \\sin^{2}{\\left(0.5 x + 0.3 \\right)} + 1\\right)^{2.5}} - \\frac{0.25 \\sin{\\left(0.5 x + 0.3 \\right)}}{\\left(1.0 \\sin^{2}{\\left(0.5 x + 0.3 \\right)} + 1\\right)^{1.5}}$"
      ],
      "text/plain": [
       "<IPython.core.display.Math object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# calc curvature of second path\n",
    "dotphi_2_y = sm.diff(phi_2,y)\n",
    "ddotphi_2_yy = sm.diff(dotphi_2_y,y)\n",
    "dotphi_2_x = sm.diff(phi_2,x)\n",
    "ddotphi_2_xx = sm.diff(dotphi_2_x,x)\n",
    "ddotphi_2_xy = sm.diff(dotphi_2_x,y)\n",
    "display(Math(sm.latex(phi_2)))\n",
    "display(Math(sm.latex(dotphi_2_y)))\n",
    "display(Math(sm.latex(ddotphi_2_yy)))\n",
    "display(Math(sm.latex(dotphi_2_x)))\n",
    "display(Math(sm.latex(ddotphi_2_xx)))\n",
    "display(Math(sm.latex(ddotphi_2_xy)))\n",
    "xi = abs(dotphi_2_y**2*ddotphi_2_xx-2*dotphi_2_x*dotphi_2_y*ddotphi_2_xy+dotphi_2_x**2*ddotphi_2_yy)/((dotphi_2_x)**2+(dotphi_2_y)**2)**(3/2)\n",
    "display_expr(xi)\n",
    "params = tuple(xi.free_symbols)\n",
    "calc_phi_2_xi = sm.lambdify(params, xi, modules='numpy')\n",
    "\n",
    "dotxi = sm.diff( (dotphi_2_y**2*ddotphi_2_xx-2*dotphi_2_x*dotphi_2_y*ddotphi_2_xy+dotphi_2_x**2*ddotphi_2_yy)/((dotphi_2_x)**2+(dotphi_2_y)**2)**(3/2) ,x)\n",
    "display_expr(dotxi)\n",
    "calc_phi_2_dotxi = sm.lambdify(x, dotxi, modules='numpy')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "# calc curvature\n",
    "def calc_curvature(s):\n",
    "    i = search_index(s)\n",
    "    if i==len(s_all)-1:\n",
    "        i-=1\n",
    "    if i==0:\n",
    "        xi=1/R1\n",
    "    elif i==1:\n",
    "        x = calc_phi_2_x(s-s_all[1])\n",
    "        xi = calc_phi_2_xi(x)\n",
    "    else:\n",
    "        xi=1/R3\n",
    "    return xi\n",
    "\n",
    "def calc_dotcurvature(s):\n",
    "    i = search_index(s)\n",
    "    if i==len(s_all)-1:\n",
    "        i-=1\n",
    "    if i==0:\n",
    "        xi=0\n",
    "    elif i==1:\n",
    "        x = calc_phi_2_x(s-s_all[1])\n",
    "        xi = calc_phi_2_dotxi(x)\n",
    "    else:\n",
    "        xi=0\n",
    "    return xi\n",
    "\n",
    "def calc_xi_dxds(s):\n",
    "    i = search_index(s)\n",
    "    if i==len(s_all)-1:\n",
    "        i-=1\n",
    "    if i==0:\n",
    "        xi_dxds=0\n",
    "    elif i==1:\n",
    "        s -= s_all[1]\n",
    "        s_prev -= s_all[1]    \n",
    "        xi_dxds = (calc_phi_2_x(s)-calc_phi_2_x(s_prev))/(s-s_prev)\n",
    "    else:\n",
    "        xi_dxds=0\n",
    "    return xi_dxds"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "# calc e\n",
    "calc_phi_1 = sm.lambdify((x,y), phi_1, modules='numpy')\n",
    "calc_phi_2 = sm.lambdify((x,y), phi_2, modules='numpy')\n",
    "calc_phi_3 = sm.lambdify((x,y), phi_3, modules='numpy')\n",
    "\n",
    "def calc_e(x,y,s):\n",
    "    i = search_index(s)\n",
    "    if i==len(s_all)-1:\n",
    "        i-=1\n",
    "    if i==0:\n",
    "        e = calc_phi_1(x,y)\n",
    "    elif i==1:\n",
    "        e = calc_phi_2(x,y)\n",
    "    else:\n",
    "        e = calc_phi_3(x,y)\n",
    "    # print(i)\n",
    "    return e"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Control"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11.729939247841472\n"
     ]
    }
   ],
   "source": [
    "Vs = 5\n",
    "T = s_all[-1]/Vs\n",
    "print(T) # simulation time"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/latex": [
       "$\\displaystyle z=\\left[\\begin{matrix}v_x\\\\v_y\\\\\\omega\\\\x\\\\y\\\\\\alpha\\\\s\\end{matrix}\\right]$"
      ],
      "text/plain": [
       "<IPython.core.display.Math object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "z = sm.Matrix([[vx],[vy],[omega],[x],[y],[alpha],[s]])\n",
    "display_expr(z)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/latex": [
       "$\\displaystyle rhs=\\left[\\begin{matrix}0.357 F_x\\\\0.357 F_y\\\\0.333 M\\\\v_x \\cos{\\left(\\alpha \\right)} + v_y \\sin{\\left(\\alpha \\right)}\\\\- v_x \\sin{\\left(\\alpha \\right)} + v_y \\cos{\\left(\\alpha \\right)}\\\\\\omega\\\\- \\left(- v_x \\sin{\\left(\\alpha \\right)} + v_y \\cos{\\left(\\alpha \\right)}\\right) \\sin{\\left(\\alpha^{*} \\right)} + \\left(v_x \\cos{\\left(\\alpha \\right)} + v_y \\sin{\\left(\\alpha \\right)}\\right) \\cos{\\left(\\alpha^{*} \\right)}\\end{matrix}\\right]$"
      ],
      "text/plain": [
       "<IPython.core.display.Math object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(alpha_asterisk, vx, vy, alpha)\n"
     ]
    }
   ],
   "source": [
    "rhs = sm.Matrix([Au,vb[0],vb[1],omega,dots])\n",
    "display_expr(rhs)\n",
    "\n",
    "params = tuple(dots.free_symbols)\n",
    "print(params)\n",
    "calc_dots = sm.lambdify(params, dots, modules='numpy')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/latex": [
       "$\\displaystyle rhs=\\left[\\begin{matrix}- 1.0 \\xi \\left(- \\left(- v_x \\sin{\\left(\\alpha \\right)} + v_y \\cos{\\left(\\alpha \\right)}\\right) \\sin{\\left(\\alpha^{*} \\right)} + \\left(v_x \\cos{\\left(\\alpha \\right)} + v_y \\sin{\\left(\\alpha \\right)}\\right) \\cos{\\left(\\alpha^{*} \\right)}\\right) \\left(\\left(- v_x \\sin{\\left(\\alpha \\right)} + v_y \\cos{\\left(\\alpha \\right)}\\right) \\cos{\\left(\\alpha^{*} \\right)} + \\left(v_x \\cos{\\left(\\alpha \\right)} + v_y \\sin{\\left(\\alpha \\right)}\\right) \\sin{\\left(\\alpha^{*} \\right)}\\right) + 5.0 \\left(- v_x \\sin{\\left(\\alpha \\right)} + v_y \\cos{\\left(\\alpha \\right)}\\right) \\sin{\\left(\\alpha^{*} \\right)} - 5.0 \\left(v_x \\cos{\\left(\\alpha \\right)} + v_y \\sin{\\left(\\alpha \\right)}\\right) \\cos{\\left(\\alpha^{*} \\right)} + 25.0\\\\- 20.0 e + 1.0 \\xi \\left(- \\left(- v_x \\sin{\\left(\\alpha \\right)} + v_y \\cos{\\left(\\alpha \\right)}\\right) \\sin{\\left(\\alpha^{*} \\right)} + \\left(v_x \\cos{\\left(\\alpha \\right)} + v_y \\sin{\\left(\\alpha \\right)}\\right) \\cos{\\left(\\alpha^{*} \\right)}\\right)^{2} - 5.0 \\left(- v_x \\sin{\\left(\\alpha \\right)} + v_y \\cos{\\left(\\alpha \\right)}\\right) \\cos{\\left(\\alpha^{*} \\right)} - 5.0 \\left(v_x \\cos{\\left(\\alpha \\right)} + v_y \\sin{\\left(\\alpha \\right)}\\right) \\sin{\\left(\\alpha^{*} \\right)}\\\\- 20.0 \\alpha + 20.0 \\alpha^{*} + 1.0 \\dot \\xi \\frac{\\partial x_{\\xi}(s)}{\\partial s} \\left(- \\left(- v_x \\sin{\\left(\\alpha \\right)} + v_y \\cos{\\left(\\alpha \\right)}\\right) \\sin{\\left(\\alpha^{*} \\right)} + \\left(v_x \\cos{\\left(\\alpha \\right)} + v_y \\sin{\\left(\\alpha \\right)}\\right) \\cos{\\left(\\alpha^{*} \\right)}\\right)^{2} + 1.0 \\xi^{2} \\left(- \\left(- v_x \\sin{\\left(\\alpha \\right)} + v_y \\cos{\\left(\\alpha \\right)}\\right) \\sin{\\left(\\alpha^{*} \\right)} + \\left(v_x \\cos{\\left(\\alpha \\right)} + v_y \\sin{\\left(\\alpha \\right)}\\right) \\cos{\\left(\\alpha^{*} \\right)}\\right) \\left(\\left(- v_x \\sin{\\left(\\alpha \\right)} + v_y \\cos{\\left(\\alpha \\right)}\\right) \\cos{\\left(\\alpha^{*} \\right)} + \\left(v_x \\cos{\\left(\\alpha \\right)} + v_y \\sin{\\left(\\alpha \\right)}\\right) \\sin{\\left(\\alpha^{*} \\right)}\\right) + 1.0 \\xi \\left(- \\xi \\left(- \\left(- v_x \\sin{\\left(\\alpha \\right)} + v_y \\cos{\\left(\\alpha \\right)}\\right) \\sin{\\left(\\alpha^{*} \\right)} + \\left(v_x \\cos{\\left(\\alpha \\right)} + v_y \\sin{\\left(\\alpha \\right)}\\right) \\cos{\\left(\\alpha^{*} \\right)}\\right) \\left(\\left(- v_x \\sin{\\left(\\alpha \\right)} + v_y \\cos{\\left(\\alpha \\right)}\\right) \\cos{\\left(\\alpha^{*} \\right)} + \\left(v_x \\cos{\\left(\\alpha \\right)} + v_y \\sin{\\left(\\alpha \\right)}\\right) \\sin{\\left(\\alpha^{*} \\right)}\\right) + 5 \\left(- v_x \\sin{\\left(\\alpha \\right)} + v_y \\cos{\\left(\\alpha \\right)}\\right) \\sin{\\left(\\alpha^{*} \\right)} - 5 \\left(v_x \\cos{\\left(\\alpha \\right)} + v_y \\sin{\\left(\\alpha \\right)}\\right) \\cos{\\left(\\alpha^{*} \\right)} + 25\\right)\\\\v_x \\cos{\\left(\\alpha \\right)} + v_y \\sin{\\left(\\alpha \\right)}\\\\- v_x \\sin{\\left(\\alpha \\right)} + v_y \\cos{\\left(\\alpha \\right)}\\\\\\omega\\\\- \\left(- v_x \\sin{\\left(\\alpha \\right)} + v_y \\cos{\\left(\\alpha \\right)}\\right) \\sin{\\left(\\alpha^{*} \\right)} + \\left(v_x \\cos{\\left(\\alpha \\right)} + v_y \\sin{\\left(\\alpha \\right)}\\right) \\cos{\\left(\\alpha^{*} \\right)}\\end{matrix}\\right]$"
      ],
      "text/plain": [
       "<IPython.core.display.Math object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(e, dotxi, xi_dxds, alpha_asterisk, vx, vy, omega, xi, alpha)\n"
     ]
    }
   ],
   "source": [
    "# control sugnals formulation\n",
    "xi = sm.symbols(\"xi\")\n",
    "dotxi = sm.symbols(\"dotxi\")\n",
    "e = sm.symbols(\"e\")\n",
    "xi_dxds = sm.symbols(\"xi_dxds\")\n",
    "ks = 5\n",
    "ke1 = 5\n",
    "ke2 = 20\n",
    "kdelta2 = 20\n",
    "us = -xi*dots*dote+ks*(Vs-dots)\n",
    "rhs = rhs.subs(Fx,m*(us))\n",
    "rhs = rhs.subs(Fy,m*(xi*dots**2-ke1*dote-ke2*e))\n",
    "rhs = rhs.subs(M,J*(xi*us+dotxi*xi_dxds*dots**2+xi**2*dots*dote - kdelta2*(alpha-alpha_asterisk)))\n",
    "display_expr(rhs)\n",
    "\n",
    "params = tuple(rhs.free_symbols)\n",
    "print(params)\n",
    "calc_rhs = sm.lambdify(params, rhs, modules='numpy')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "# calc_rhs(xi, alpha, e, alpha_asterisk, vy, dotxi, vx, omega)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 170,
   "metadata": {},
   "outputs": [],
   "source": [
    "def rhs(t, z):\n",
    "    vx,vy,omega,x,y,alpha,s = z\n",
    "    \n",
    "    e = calc_e(x,y,s)\n",
    "    xi = calc_curvature(s)\n",
    "    dotxi = calc_dotcurvature(s)\n",
    "    alpha_asterisk = calc_alpha_asterisk(s)\n",
    "    dots = calc_dots(alpha_asterisk, vx, vy, alpha)\n",
    "    if(sol.step_size):\n",
    "        xi_dxds = calc_xi_dxds(s,s-dots*sol.step_size)\n",
    "    xi_dxds = 0\n",
    "\n",
    "    return calc_rhs(e, dotxi, xi_dxds, alpha_asterisk, vx, vy, omega, xi, alpha).reshape(1,7)[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 171,
   "metadata": {},
   "outputs": [],
   "source": [
    "T = 0.3\n",
    "z0 = [0,0,0,x0,y0,alpha0,s0] # [vx],[vy],[omega],[x],[y],[alpha],[s]\n",
    "sol = sp.integrate.RK45(rhs, 0, z0, T+3, rtol=1e-2, atol=1e-4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 172,
   "metadata": {},
   "outputs": [],
   "source": [
    "y = np.array([]).reshape(7,0)\n",
    "t = np.array([0])\n",
    "while sol.t <= T:\n",
    "    sol.step()\n",
    "    y = np.hstack((y, np.array(sol.y).reshape(7,1)) )\n",
    "    t = np.append(t,t[-1] + sol.step_size)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# z0 = [0,0,0,x0,y0,alpha0,s0] # [vx],[vy],[omega],[x],[y],[alpha],[s]\n",
    "# sol = sp.integrate.solve_ivp(rhs, [0, 0.3], z0,method='RK45', dense_output=False,rtol=1e-2, atol=1e-4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 173,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 2000x1000 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# t = sol.t\n",
    "# z_traj = sol.y\n",
    "# t = sol.t\n",
    "z_traj = y\n",
    "\n",
    "fig, ax = plt.subplots(1,1,figsize = (20,10))\n",
    "labels = ['robot $X_mOY_m$ trajectory','desired trajectory']\n",
    "colours = ['g','b']\n",
    "ax.plot(z_traj[3],z_traj[4],label=labels[0],color=colours[0])\n",
    "plt.plot(x1,fun_calc_phi_12_y(x1),\"-\",color=colours[1],label=labels[1])\n",
    "plt.plot(x2,fun_calc_phi_2_y(x2),\"-\",color=colours[1])\n",
    "plt.plot(x3,fun_calc_phi_31_y(x3),\"-\",color=colours[1])\n",
    "plt.plot(x4,fun_calc_phi_32_y(x4),\"-\",color=colours[1])\n",
    "plt.plot(x0,y0,\"or\")\n",
    "\n",
    "fig.suptitle(\"robot movement with control signal\")\n",
    "ax.set_xlabel(\"$x$\")\n",
    "ax.set_ylabel(\"$y$\")\n",
    "ax.grid(True)\n",
    "ax.legend(fontsize=\"20\",loc='upper right')\n",
    "ax.axis('equal')\n",
    "plt.show()\n",
    "\n",
    "# fig, ax = plt.subplots(2,4,figsize = (20,8))\n",
    "# for i in range(2):\n",
    "#     for j in range(4):\n",
    "#         ax[i][j].grid(True)\n",
    "# plt.subplot(241)\n",
    "# plt.plot(t,z1_traj[0],\"-b\")\n",
    "# plt.plot(t,x_des,\"--\",color=\"orange\")\n",
    "# plt.title(\"$z_{1_{11}}$ or P''x\")\n",
    "# plt.subplot(242)\n",
    "# plt.plot(t,z1_traj[1])\n",
    "# plt.plot(t,y_des,\"--\",color=\"orange\")\n",
    "# plt.title(\"$z_{1_{21}}$ or P''y\")\n",
    "# plt.subplot(243)\n",
    "# plt.plot(t,z1_traj[6] )\n",
    "# plt.title(\"vartheta\")\n",
    "# plt.subplot(244)\n",
    "# plt.plot(t,z1_traj[7])\n",
    "# plt.title(\"beta_s1\")\n",
    "# plt.subplot(245)\n",
    "# plt.plot(t,z1_traj[2])\n",
    "# plt.title(\"beta_s2\")\n",
    "\n",
    "# eta_v = np.array([])\n",
    "# zeta_1_v = np.array([])\n",
    "# zeta_2_v = np.array([])\n",
    "# for i in range(len(t)):\n",
    "#     u_v = np.dot( fun_Kinv(z1_traj[2][i], z1_traj[6][i], z1_traj[7][i]), np.array([z1_traj[3][i],z1_traj[4][i],z1_traj[5][i]]).reshape(3,1) )\n",
    "#     eta_v = np.append(eta_v,u_v[0][0])\n",
    "#     zeta_1_v = np.append(zeta_1_v,u_v[1][0])\n",
    "#     zeta_2_v = np.append(zeta_2_v,u_v[2][0])\n",
    "\n",
    "# plt.subplot(246)\n",
    "# plt.plot(t,eta_v)\n",
    "# plt.title(\"eta\")\n",
    "# ax[1][1].set_ylim([-10000,10000])\n",
    "# plt.subplot(247)\n",
    "# plt.plot(t,zeta_1_v)\n",
    "# plt.title(\"zeta_1\")\n",
    "# ax[1][2].set_ylim([-10000,10000])\n",
    "# plt.subplot(248)\n",
    "# plt.plot(t,zeta_2_v)\n",
    "# plt.title(\"zeta_2\")\n",
    "# plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "learn-multibody-dynamics",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.18"
  },
  "orig_nbformat": 4
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
